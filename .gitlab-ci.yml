.auto-deploy:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v2.8.0"
  dependencies: []

test:
  image: plangora/alpine-elixir-phoenix:otp-23.3.3-elixir-1.11.3
  services:
  - postgis/postgis:13-master
  variables:
    MIX_ENV: "test"
    DB_HOST: postgis-postgis
    POSTGRES_DB: omega_bravera_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  script:
    - mix clean
    - mix do deps.get, test --exclude skip

build_staging:
  stage: build
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image:v0.4.0"
  variables:
    DOCKER_TLS_CERTDIR: ""
  tags:
    - kubernetes
  services:
    - docker:19.03.12-dind
  environment: staging
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - /build/build.sh
  rules:
    - if: '$CI_COMMIT_REF_NAME == "staging"'

staging_deploy:
  extends: .auto-deploy
  stage: deploy
  variables:
    POSTGRES_ENABLED: "false"
    KUBE_INGRESS_BASE_DOMAIN: "new-staging.bravera.co"
    ROLLOUT_RESOURCE_TYPE: deployment
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
  environment:
    name: staging
    url: https://staging.bravera.co/
  rules:
    - if: '$CI_COMMIT_REF_NAME == "staging"'

production:
  stage: deploy
  environment: production
  image: plangora/alpine-elixir-phoenix:otp-23.3.2-elixir-1.11.3
  variables:
    MIX_ENV: "dev"
    REFSPEC: master
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
  before_script:
    - apk add --no-cache openssh-client procps
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p /root/.ssh
    - cp .deliver/ssh_config /root/.ssh/config
    - chmod -R 700 /root/.ssh
    - mix do deps.get, deps.compile
    - git branch -f master HEAD
  script:
    - mix edeliver update production -P --start-deploy
    - mix edeliver migrate production -P
    - mix edeliver ping production -P